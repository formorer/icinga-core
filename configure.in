dnl Process this -*-m4-*- file with autoconf to produce a configure script.

dnl Disable caching
define([AC_CACHE_LOAD],)
define([AC_CACHE_SAVE],)

AC_INIT(base/icinga.c)
AM_INIT_AUTOMAKE([icinga],[1.3.0])
AC_CONFIG_HEADER(include/config.h include/snprintf.h)
AC_PREFIX_DEFAULT(/usr/local/icinga)



PKG_NAME=icinga-core
PKG_VERSION="1.3.0"
PKG_HOME_URL="http://www.icinga.org/"
PKG_REL_DATE="02-16-2011"

dnl Figure out how to invoke "install" and what install options to use.
AC_PROG_INSTALL
AC_SUBST(INSTALL)

dnl What OS are we running?
AC_CANONICAL_HOST

dnl Checks for programs.
AC_PROG_CC

AC_PROG_CXX
AC_PROG_MAKE_SET
AC_PATH_PROG([STRIP],[strip],[true])

LT_INIT
AC_CONFIG_MACRO_DIR([m4])
dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_TIME
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(arpa/inet.h ctype.h dirent.h errno.h fcntl.h getopt.h grp.h libgen.h limits.h math.h netdb.h netinet/in.h pthread.h pthreads.h pwd.h regex.h signal.h socket.h stdarg.h string.h strings.h sys/mman.h sys/types.h sys/time.h sys/resource.h sys/wait.h sys/socket.h sys/stat.h sys/timeb.h sys/un.h sys/ipc.h sys/msg.h sys/poll.h syslog.h uio.h unistd.h stdlib.h  sys/time.h)



dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_STRUCT_TM
AC_STRUCT_TIMEZONE
AC_TYPE_MODE_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_SIGNAL
AC_TYPE_GETGROUPS

# Checks for typedefs, structures, and compiler characteristics.
AC_TYPE_UID_T

#AC_TYPE_FILE_T

AC_C_INLINE
AC_HEADER_STDBOOL




# Checks for library functions.
AC_FUNC_CHOWN
AC_FUNC_FORK
AC_FUNC_MALLOC
AC_FUNC_MKTIME
AC_FUNC_MMAP
AC_FUNC_REALLOC
AC_FUNC_STRTOD


dnl Check for asprintf() and friends...
AC_CACHE_CHECK([for va_copy],ac_cv_HAVE_VA_COPY,[
AC_TRY_LINK([#include <stdarg.h>
va_list ap1,ap2;], [va_copy(ap1,ap2);],
ac_cv_HAVE_VA_COPY=yes,
ac_cv_HAVE_VA_COPY=no)])
if test x"$ac_cv_HAVE_VA_COPY" = x"yes"; then
    AC_DEFINE(HAVE_VA_COPY,1,[Whether va_copy() is available])
else
    AC_CACHE_CHECK([for __va_copy],ac_cv_HAVE___VA_COPY,[
    AC_TRY_LINK([#include <stdarg.h>
    va_list ap1,ap2;], [__va_copy(ap1,ap2);],
    ac_cv_HAVE___VA_COPY=yes,
    ac_cv_HAVE___VA_COPY=no)])
    if test x"$ac_cv_HAVE___VA_COPY" = x"yes"; then
        AC_DEFINE(HAVE___VA_COPY,1,[Whether __va_copy() is available])
    fi
fi

dnl base/Makefile.in
AC_CHECK_FUNC(vsnprintf,,SNPRINTF_O=../common/snprintf.o)
AC_CHECK_FUNC(snprintf,,SNPRINTF_O=../common/snprintf.o)
AC_CHECK_FUNC(asprintf,,SNPRINTF_O=../common/snprintf.o)
AC_CHECK_FUNC(vasprintf,,SNPRINTF_O=../common/snprintf.o)

dnl module/idoutils/src/Makefile.in
AC_CHECK_FUNC(vsnprintf,,SNPRINTF_O_IDO=../../../common/snprintf.o)
AC_CHECK_FUNC(snprintf,,SNPRINTF_O_IDO=../../../common/snprintf.o)
AC_CHECK_FUNC(asprintf,,SNPRINTF_O_IDO=../../../common/snprintf.o)
AC_CHECK_FUNC(vasprintf,,SNPRINTF_O_IDO=../../../common/snprintf.o)

AC_DEFINE([HAVE_OCILIB_H], [], [octave])
AC_DEFINE([HAVE_SSL], [], [ssl check])
AC_DEFINE([USE_LIBDBI], [], [lib dbi])
AC_DEFINE([USE_ORACLE], [], [oracle])
AC_DEFINE([USE_PGSQL], [], [postgres])
AC_DEFINE([USE_ST_BASED_ESCAL_RANGES], [], [Description])

AC_CACHE_CHECK([for C99 vsnprintf],ac_cv_HAVE_C99_VSNPRINTF,[
AC_TRY_RUN([
#include <sys/types.h>
#include <stdarg.h>
void foo(const char *format, ...) {
       va_list ap;
       int len;
       char buf[5];

       va_start(ap, format);
       len = vsnprintf(buf, 0, format, ap);
       va_end(ap);
       if (len != 5) exit(1);

       va_start(ap, format);
       len = vsnprintf(0, 0, format, ap);
       va_end(ap);
       if (len != 5) exit(1);

       if (snprintf(buf, 3, "hello") != 5 || strcmp(buf, "he") != 0) exit(1);

       exit(0);
}
main() { foo("hello"); }
],
ac_cv_HAVE_C99_VSNPRINTF=yes,ac_cv_HAVE_C99_VSNPRINTF=no,ac_cv_HAVE_C99_VSNPRINTF=cross)])
if test x"$ac_cv_HAVE_C99_VSNPRINTF" = x"yes"; then
    AC_DEFINE(HAVE_C99_VSNPRINTF,1,[Define if system has C99 compatible vsnprintf])
fi

dnl AC_CHECK_FUNC(snprintf,AC_DEFINE(HAVE_SNPRINTF),SNPRINTF_O=../common/snprintf.o)
AC_SUBST(SNPRINTF_O)
AC_SUBST(SNPRINTF_O_IDO)


dnl Checks for library functions.
AC_SEARCH_LIBS([getservbyname],[nsl],
	[if test "$ac_cv_search_getservbyname" != "none required"; then
		SOCKETLIBS="$SOCKETLIBS -lnsl"
	fi])
AC_SEARCH_LIBS([connect],[socket],
	[if test "$ac_cv_search_connect" != "none required"; then
		SOCKETLIBS="$SOCKETLIBS -lsocket"
	fi])
AC_SUBST(SOCKETLIBS)
AC_CHECK_FUNCS(initgroups setenv strdup strstr strtoul unsetenv)

dnl Check for gethostbyname (requires libnsl on Solaris)
AC_SEARCH_LIBS([gethostbyname], [nsl],
	[if test "$ac_cv_search_gethostbyname" != "none required"; then
		SOCKETLIBS="$SOCKETLIBS -lnsl"
	fi])

dnl Check for getopt_long (Solaris)
AC_CHECK_FUNCS([getopt_long],,AC_CHECK_LIB([iberty],[getopt_long],OTHERLIBS="$OTHERLIBS -liberty"))
AC_SUBST(OTHERLIBS)


AC_MSG_CHECKING(for type of socket size)
AC_TRY_COMPILE([#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
],
[int a = send(1, (const void *) 0, (size_t) 0, (int) 0);],
[AC_DEFINE(SOCKET_SIZE_TYPE, size_t, [typedef for socket size]) AC_MSG_RESULT(size_t)],
[AC_DEFINE(SOCKET_SIZE_TYPE, int, [typedef for socket size]) AC_MSG_RESULT(int)])


dnl Test for pthreads support - taken from ICU FreeBSD Port configure script
THREADLIBS=""
have_pthreads="no"

dnl FreeBSD: Try ports/linuxthreads first - Mammad Zadeh <mammad@yahoo-inc.com>
dnl FreeBSD -pthread check - Jonathan McDowell <noodles@earth.li>
AC_DEFUN([AC_PTHREAD_FREEBSD],[
	AC_CHECK_LIB(lthread,pthread_create,[
		CFLAGS="-D_THREAD_SAFE -I/usr/local/include/pthread/linuxthreads -I/usr/include $CFLAGS"
		THREADLIBS="-L/usr/local/lib -llthread -llgcc_r"
		],[
		AC_MSG_CHECKING([if we need -pthread for threads])
		AC_CACHE_VAL(ac_cv_ldflag_pthread,[
			ac_save_LDFLAGS="$LDFLAGS"
			LDFLAGS="-pthread $LDFLAGS"
			AC_TRY_LINK([
				char pthread_create();
				],
				pthread_create();,
				eval "ac_cv_ldflag_pthread=yes",
				eval "ac_cv_ldflag_pthread=no"
				),
			THREADLIBS="$ac_save_LDFLAGS"
			])
		if eval "test \"`echo $ac_cv_ldflag_pthread`\" = yes"; then
			AC_MSG_RESULT(yes)
		else
			AC_MSG_RESULT(no)
		fi
		],-L/usr/local/lib)
	])

dnl Test for HPUX cma threads first..
AC_CHECK_LIB(cma,pthread_create,THREADLIBS="$THREADLIBS -lpthread")
if test $ac_cv_lib_cma_pthread_create = yes; then
	have_pthreads="yes"
fi

dnl special pthread handling
dnl AIX uses pthreads instead of pthread, and HP/UX uses cma
dnl FreeBSD users -pthread
AC_CHECK_LIB(pthread,pthread_create,THREADLIBS="$THREADLIBS -lpthread")
if test $ac_cv_lib_pthread_pthread_create = yes; then
	have_pthreads="yes"
else
	dnl For HP 11
	AC_CHECK_LIB(pthread,pthread_mutex_init,THREADLIBS="$THREADLIBS -lpthread")
	if test $ac_cv_lib_pthread_pthread_mutex_init = yes; then
		have_pthreads="yes"
	fi
fi

dnl AIX uses pthreads instead of pthread
if test $have_pthreads = "no"; then
	AC_CHECK_LIB(pthreads,pthread_create,THREADLIBS="$THREADLIBS -lpthreads")
	if test $ac_cv_lib_pthreads_pthread_create = yes; then
		have_pthreads="yes"
	fi
fi

dnl all other thread tests fail, try BSD's -pthread
if test $have_pthreads = "no"; then
	AC_PTHREAD_FREEBSD
fi

AC_SUBST(THREADLIBS)

dnl Solaris needs rt or posix4 libraries for nanosleep()
AC_SEARCH_LIBS(nanosleep,[rt posix4],,[
	echo "Error: nanosleep() needed for timing operations."
	exit 1
	])


AC_ARG_WITH(icinga_user,AC_HELP_STRING([--with-icinga-user=<user>],[sets user name to run icinga]),icinga_user=$withval,icinga_user=icinga)
AC_ARG_WITH(icinga_group,AC_HELP_STRING([--with-icinga-group=<grp>],[sets group name to run icinga]),icinga_grp=$withval,icinga_grp=icinga)
AC_SUBST(icinga_user)
AC_SUBST(icinga_grp)
AC_DEFINE_UNQUOTED(DEFAULT_ICINGA_USER,"$icinga_user",[user name to run nagios])
AC_DEFINE_UNQUOTED(DEFAULT_NAGIOS_USER,"$icinga_user",[user name to run nagios])
AC_DEFINE_UNQUOTED(DEFAULT_ICINGA_GROUP,"$icinga_grp",[group name to run nagios])
AC_DEFINE_UNQUOTED(DEFAULT_NAGIOS_GROUP,"$icinga_grp",[group name to run nagios])
INSTALL_OPTS="-o $icinga_user -g $icinga_grp"
AC_SUBST(INSTALL_OPTS)

AC_ARG_WITH(command_user,AC_HELP_STRING([--with-command-user=<user>],[sets user name for command access]),command_user=$withval,command_user=$icinga_user)
AC_ARG_WITH(command_group,AC_HELP_STRING([--with-command-group=<grp>] ,[sets group name for command access]),command_grp=$withval,command_grp=$icinga_grp)
AC_SUBST(command_user)
AC_SUBST(command_grp)
COMMAND_OPTS="-o $command_user -g $command_grp"
AC_SUBST(COMMAND_OPTS)

dnl Check for location of mail program
MAIL_PROG=no
AC_ARG_WITH(mail,AC_HELP_STRING([--with-mail=<path_to_mail>],[sets path to equivalent program to mail]),MAIL_PROG=$withval,MAIL_PROG=no)
if test x$MAIL_PROG = xno; then
	AC_PATH_PROG(MAIL_PROG,mail)
fi
dnl Fix for systems that don't (yet) have mail/mailx installed...
if test x$MAIL_PROG = x; then
	MAIL_PROG="/bin/mail"
fi
AC_SUBST(MAIL_PROG)

dnl Check for location of Apache conf.d directory
HTTP_CONF=no
AC_ARG_WITH(httpd_conf,AC_HELP_STRING([--with-httpd-conf=<path_to_conf>],[sets path to Apache conf.d directory]),HTTPD_CONF=$withval,HTTPD_CONF=no)
if test x$HTTPD_CONF = xno; then
	if test -d /etc/httpd/conf.d; then
		HTTPD_CONF="/etc/httpd/conf.d"
	elif test -d /etc/apache2/conf.d; then
		HTTPD_CONF="/etc/apache2/conf.d"
	elif test -d /etc/apache/conf.d; then
		HTTPD_CONF="/etc/apache/conf.d"
	else
		HTTPD_CONF="/etc/httpd/conf.d"
	fi
fi
AC_SUBST(HTTPD_CONF)

dnl Location of check result path
CHECKRESULTDIR=no
AC_ARG_WITH(checkresult-dir,AC_HELP_STRING([--with-checkresult-dir=<path>],[sets path to check results spool directory]),CHECKRESULTDIR=$withval,CHECKRESULTDIR=no)
if test x$CHECKRESULTDIR = xno; then
	CHECKRESULTDIR="$localstatedir/spool/checkresults"
fi
AC_SUBST(CHECKRESULTDIR)

dnl Location of check result path
TMPDIR=no
AC_ARG_WITH(temp-dir,AC_HELP_STRING([--with-temp-dir=<path>],[sets path to temp directory]),TMPDIR=$withval,TMPDIR=no)
if test x$TMPDIR = xno; then
	TMPDIR="/tmp"
fi
AC_SUBST(TMPDIR)

dnl Check for location of init scripts
init_dir=/etc/rc.d/init.d
if test -d /etc/rc.d/init.d; then
	init_dir="/etc/rc.d/init.d"
elif test -d /usr/local/etc/rc.d; then
	init_dir="/usr/local/etc/rc.d"
elif test -d /etc/rc.d; then
	init_dir="/etc/rc.d"
elif test -d /etc/init.d; then
	init_dir="/etc/init.d"
elif test -d /sbin/init.d; then
	init_dir="/sbin/init.d"
fi

dnl User can override init script location
AC_ARG_WITH(init_dir,AC_HELP_STRING([--with-init-dir=<path>],[sets directory to place init script into]),init_dir=$withval)
AC_SUBST(init_dir)

dnl User can override lock file location
AC_ARG_WITH(lockfile,AC_HELP_STRING([--with-lockfile=<path>],[sets path and file name for lock file]),lockfile=$withval,lockfile=$localstatedir/icinga.lock)
AC_SUBST(lockfile)



dnl Default xdata routines...
XSDTYPE=default
XCDTYPE=default
XRDTYPE=default
XODTYPE=template
XPDTYPE=default
XDDTYPE=default

XSDCOMMENT=
XCDCOMMENT=
XRDCOMMENT=
XODCOMMENT=
XPDCOMMENT=
XDDCOMMENT=

USE_MYSQL=no
USE_PGSQL=no

dnl Status data
AC_DEFINE_UNQUOTED(USE_XSDDEFAULT,,[use default routines (in xdata/xsddefault.*) for status data I/O...])
XSDC="xsddefault.c"
XSDH="xsddefault.h"
XSDCOMMENT="Default (text file)"
echo "We'll use default routines (in xdata/xsddefault.*) for status data I/O..."
AC_SUBST(XSDC)
AC_SUBST(XSDH)


dnl Comment data
AC_DEFINE_UNQUOTED(USE_XCDDEFAULT,,[use default routines (in xdata/xcddefault.*) for comment data I/O...])
XCDC="xcddefault.c"
XCDH="xcddefault.h"
XCDCOMMENT="Default (text file)"
echo "We'll use default routines (in xdata/xcddefault.*) for comment data I/O..."
AC_SUBST(XCDC)
AC_SUBST(XCDH)


dnl Retention data
AC_DEFINE_UNQUOTED(USE_XRDDEFAULT,,[use default routines (in xdata/xrddefault.*) for retention data I/O...])
XRDC="xrddefault.c"
XRDH="xrddefault.h"
XRDCOMMENT="Default (text file)"
echo "We'll use default routines (in xdata/xrddefault.*) for retention data I/O..."
AC_SUBST(XRDC)
AC_SUBST(XRDH)


dnl Object data
AC_DEFINE_UNQUOTED(USE_XODTEMPLATE,,[use template-based routines (in xdata/xodtemplate.*) for object data I/O...])
XODC="xodtemplate.c"
XODH="xodtemplate.h"
XODCOMMENT="Template-based (text file)"
echo "We'll use template-based routines (in xdata/xodtemplate.*) for object data I/O..."
AC_SUBST(XODC)
AC_SUBST(XODH)

AC_CHECK_FUNCS([alarm]) # wanted by: base/utils.c:471
AC_CHECK_FUNCS([bzero]) # wanted by: base/netutils.c:235
AC_CHECK_FUNCS([dup2]) # wanted by: base/checks.c:239
AC_CHECK_FUNCS([endgrent])# wanted by: module/idoutils/src/ido2db.c:719
AC_CHECK_FUNCS([endpwent])# wanted by: module/idoutils/src/ido2db.c:745
AC_CHECK_FUNCS([floor]) #wanted by: cgi/statusmap.c:2659
AC_CHECK_FUNCS([ftruncate]) # wanted by: base/utils.c:2426
AC_CHECK_FUNCS([getcwd]) #wanted by: t/unit/run_command.c:473
AC_CHECK_FUNCS([gethostbyname]) #wanted by: module/idoutils/src/io.c:220
AC_CHECK_FUNCS([gettimeofday]) # wanted by: base/notifications.c:90
AC_CHECK_FUNCS([isascii]) #wanted by: module/idoutils/src/io.c:370
AC_CHECK_FUNCS([localtime_r]) #wanted by: common/shared.c:438
AC_CHECK_FUNCS([memmove]) # wanted by: base/utils.c:3160
AC_CHECK_FUNCS([memset]) #wanted by: common/snprintf.c:1384
AC_CHECK_FUNCS([mkfifo]) # wanted by: base/utils.c:3238
AC_CHECK_FUNCS([munmap]) #wanted by: common/shared.c:171
AC_CHECK_FUNCS([pow]) #wanted by: common/snprintf.c:1439
AC_CHECK_FUNCS([putenv]) # wanted by: base/utils.c:820
AC_CHECK_FUNCS([regcomp]) #wanted by: cgi/status.c:1473
AC_CHECK_FUNCS([select]) # wanted by: base/utils.c:3955
AC_CHECK_FUNCS([socket]) # wanted by: base/netutils.c:62
AC_CHECK_FUNCS([strcasecmp]) #wanted by: cgi/extinfo.c:3271
AC_CHECK_FUNCS([strchr]) #wanted by: common/macros.c:130
AC_CHECK_FUNCS([strcspn]) # wanted by: base/utils.c:344
AC_CHECK_FUNCS([strerror]) # wanted by: base/icingastats.c:449
AC_CHECK_FUNCS([strncasecmp]) #wanted by: cgi/getcgi.c:175
AC_CHECK_FUNCS([strpbrk]) #wanted by: common/shared.c:90
AC_CHECK_FUNCS([strrchr]) #wanted by: cgi/cgiutils.c:2012
AC_CHECK_FUNCS([strspn]) #wanted by: cgi/statuswml.c:329
AC_CHECK_FUNCS([strtol]) # wanted by: base/commands.c:2745
AC_CHECK_FUNCS([tzset]) # wanted by: base/config.c:1492
#AC_PROG_RANLIB # wanted by: ltmain.sh:1601

AC_CHECK_HEADER([stdio.h],
                [AC_DEFINE([HAVE_STDIO_H])],
                [AC_MSG_ERROR([Sorry, can't do anything for you])])

dnl Performance data
AC_DEFINE_UNQUOTED(USE_XPDDEFAULT,,[use default routines (in xdata/xpddefault.*) for performance data I/O...])
XPDC="xpddefault.c"
XPDH="xpddefault.h"
XPDCOMMENT="Default (external commands)"
echo "We'll use default routines (in xdata/xpddefault.*) for performance data I/O..."
AC_SUBST(XPDC)
AC_SUBST(XPDH)


dnl Downtime data
AC_DEFINE_UNQUOTED(USE_XDDDEFAULT,,[use default routines (in xdata/xdddefault.*) for scheduled downtime data I/O...])
XDDC="xdddefault.c"
XDDH="xdddefault.h"
XDDCOMMENT="Default (text file)"
echo "We'll use default routines (in xdata/xdddefault.*) for scheduled downtime data I/O..."
AC_SUBST(XDDC)
AC_SUBST(XDDH)


dnl Optional GD library and include paths
AC_ARG_WITH(gd-lib,AC_HELP_STRING([--with-gd-lib=DIR],[sets location of the gd library]),[
	LDFLAGS="${LDFLAGS} -L${withval}"
	LD_RUN_PATH="${withval}${LD_RUN_PATH:+:}${LD_RUN_PATH}"
	])
AC_ARG_WITH(gd-inc,AC_HELP_STRING([--with-gd-inc=DIR],[sets location of the gd include files]),[
	CFLAGS="${CFLAGS} -I${withval}"
	])


TRYGD=yep

dnl statusmap CGI enabled by default, unless users chooses not to use it
TRYSTATUSMAP=yep
AC_ARG_ENABLE(statusmap, AC_HELP_STRING([--disable-statusmap], [disables compilation of statusmap CGI]),TRYSTATUSMAP=nope)


dnl statuswrl CGI enabled by default, unless users chooses not to use it
TRYSTATUSWRL=yep
AC_ARG_ENABLE(statuswrl,AC_HELP_STRING([--disable-statuswrl],[disables compilation of statuswrl (VRML) CGI]),TRYSTATUSWRL=nope)

if test x$TRYSTATUSWRL = xyep; then
	AC_DEFINE_UNQUOTED(USE_STATUSWRL,,[statuswrl CGI enabled by default, unless users chooses not to use it])
	CGIEXTRAS="$CGIEXTRAS statuswrl.cgi"
fi


dnl JMD_CHECK_LIB_ORDER(LIBRARY, FUNCTION, ORDER [, ACTION-IF-FOUND [, ACTION-IF-NOT-FOUND
dnl              [, OTHER-LIBRARIES]]])
	AC_DEFUN([JMD_CHECK_LIB_ORDER],
	[AC_MSG_CHECKING([for $2 in -l$1 (order $3)])
	dnl Use a cache variable name containing both the library and function name,
	dnl because the test really is for library $1 defining function $2, not
	dnl just for library $1.  Separate tests with the same $1 and different $2s
	dnl may have different results.
	ac_lib_var=`echo $1['_']$2['_']$3 | sed 'y%./+-%__p_%'`
	AC_CACHE_VAL(ac_cv_lib_$ac_lib_var,
	[ac_save_LIBS="$LIBS"
	LIBS="-l$1 $6 $LIBS"
	AC_TRY_LINK(dnl
	ifelse([AC_LANG], [FORTRAN77], ,
	ifelse([$2], [main], , dnl Avoid conflicting decl of main.
[/* Override any gcc2 internal prototype to avoid an error.  */
]ifelse([AC_LANG], CPLUSPLUS, [#ifdef __cplusplus
extern "C"
#endif
])dnl
[/* We use char because int might match the return type of a gcc2
    builtin and then its argument prototype would still apply.  */
char $2();
])),
	            [$2()],
	            eval "ac_cv_lib_$ac_lib_var=yes",
	            eval "ac_cv_lib_$ac_lib_var=no")
	LIBS="$ac_save_LIBS"
	])dnl
	if eval "test \"`echo '$ac_cv_lib_'$ac_lib_var`\" = yes"; then
	  AC_MSG_RESULT(yes)
	  ifelse([$4], ,
	[changequote(, )dnl
	  ac_tr_lib=HAVE_LIB`echo $1 | sed -e 's/[^a-zA-Z0-9_]/_/g' \
	    -e 'y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/'`
	changequote([, ])dnl
	  AC_DEFINE_UNQUOTED($ac_tr_lib)
	  LIBS="-l$1 $LIBS"
	], [$4])
	else
	  AC_MSG_RESULT(no)
	ifelse([$5], , , [$5
	])dnl
	fi
	])



dnl Should we try and detect the GD libs?
if test x$TRYGD = xyep; then

	dnl libiconv is required on some systems - tack it on if found
	AC_CHECK_LIB(iconv,main,ICONV=-liconv,)

	dnl See if the GD lib is available and supports PNG images...

	dnl GD > 1.8.3 requires the TrueType library to be present as well, so test for that first...
	JMD_CHECK_LIB_ORDER(gd,gdImagePng,1,[
			GDLIBFOUND=yep
			GDLIBS="-lgd -lttf -lpng -ljpeg -lz -lm"
			],:,[-lttf -lpng -ljpeg -lz -lm])

	dnl GD > 1.8.1 requires the jpeg library to be present as well, so test for that...
	if test x$GDLIBFOUND = x; then
		JMD_CHECK_LIB_ORDER(gd,gdImagePng,2,[
			GDLIBFOUND=yep
			GDLIBS="-lgd $ICONV -lpng -ljpeg -lz -lm"
        		],:,[$ICONV -lpng -ljpeg -lz -lm])
	fi

	dnl If we failed the first test, try without jpeg library
	if test x$GDLIBFOUND = x; then
		JMD_CHECK_LIB_ORDER(gd,gdImagePng,3,[
			GDLIBFOUND=yep
			GDLIBS="-lgd $ICONV -lz -lm -lpng"
		        ],:,[$ICONV -lz -lm -lpng])
	fi

	dnl We failed again, so try a different library ordering (without jpeg libs)
	if test x$GDLIBFOUND = x; then
		JMD_CHECK_LIB_ORDER(gd,gdImagePng,4,[
			GDLIBFOUND=yep
			GDLIBS="-lgd $ICONV -lpng -lz -lm"
	        	],:,[$ICONV -lpng -lz -lm])
	fi

	dnl Did we find the necessary GD libraries?
	if test x$GDLIBFOUND = x; then
		echo ""
		echo ""
		echo "*** GD, PNG, and/or JPEG libraries could not be located... *********"
		echo ""
		echo "Boutell's GD library is required to compile the statusmap, trends"
		echo "and histogram CGIs.  Get it from http://www.boutell.com/gd/, compile"
		echo "it, and use the --with-gd-lib and --with-gd-inc arguments to specify"
		echo "the locations of the GD library and include files."
		echo ""
		echo "NOTE: In addition to the gd-devel library, you'll also need to make"
		echo "      sure you have the png-devel and jpeg-devel libraries installed"
		echo "      on your system."
		echo ""
		echo "NOTE: After you install the necessary libraries on your system:"
		echo "      1. Make sure /etc/ld.so.conf has an entry for the directory in"
		echo "         which the GD, PNG, and JPEG libraries are installed."
		echo "      2. Run 'ldconfig' to update the run-time linker options."
		echo "      3. Run 'make clean' in the Icinga distribution to clean out"
		echo "         any old references to your previous compile."
		echo "      4. Rerun the configure script."
		echo ""
		echo "NOTE: If you can't get the configure script to recognize the GD libs"
		echo "      on your system, get over it and move on to other things.  The"
		echo "      CGIs that use the GD libs are just a small part of the entire"
		echo "      Icinga package.  Get everything else working first and then"
		echo "      revisit the problem.  Make sure to check the icinga-users"
		echo "      mailing list archives for possible solutions to GD library"
		echo "      problems when you resume your troubleshooting."
		echo ""
		echo "********************************************************************"
		echo ""
		echo ""

	dnl We found the GD lib!
	else
		echo "GD library was found!"
		if test x$TRYSTATUSMAP = xyep; then
			AC_DEFINE_UNQUOTED(USE_STATUSMAP,,[defined if the user chose to include status map])
			CGIEXTRAS="$CGIEXTRAS statusmap.cgi"
			AC_CHECK_LIB(gd,gdImageCreateTrueColor,
				AC_DEFINE(HAVE_GDIMAGECREATETRUECOLOR,1,
					[Define if your gd library has gdImageCreateTrueColor]))
		fi

		dnl compile trends CGI
		AC_DEFINE_UNQUOTED(USE_TRENDS,,[compile trends CGI])
		CGIEXTRAS="$CGIEXTRAS trends.cgi"

		dnl compile histogram CGI
		AC_DEFINE_UNQUOTED(USE_HISTOGRAM,,[compile histogram CGI])
	        CGIEXTRAS="$CGIEXTRAS histogram.cgi"
	fi
fi

AC_ARG_WITH(cgiurl,AC_HELP_STRING([--with-cgiurl=<local-url>],[sets URL for cgi programs (do not use a trailing slash)]),cgiurl=$withval,cgiurl=/icinga/cgi-bin)
AC_ARG_WITH(htmurl,AC_HELP_STRING([--with-htmurl=<local-url>],[sets URL for public html]),htmurl=$withval,htmurl=/icinga)
AC_SUBST(htmurl)
AC_SUBST(cgiurl)

USE_NANOSLEEP=yes
AC_ARG_ENABLE(nanosleep,AC_HELP_STRING([--enable-nanosleep],[enables use of nanosleep (instead sleep) in event timing]),USE_NANOSLEEP=$enableval,USE_NANOSLEEP=yes)
if test x$USE_NANOSLEEP = xyes; then
	AC_DEFINE_UNQUOTED(USE_NANOSLEEP,,[enables use of nanosleep (instead of sleep)])
fi

USE_EVENTBROKER=yes
AC_ARG_ENABLE(event-broker,AC_HELP_STRING([--enable-event-broker],[enables integration of event broker routines]),USE_EVENTBROKER=$enableval,USE_EVENTBROKER=yes)

BROKER_LDFLAGS=""
BROKERLIBS="";
some_dl_found="no";
if test x$USE_EVENTBROKER = xyes; then

	dnl Which loader library should we use? libtdl or dl?
	dnl Hopefully this will be portable and not give us headaches...
	AC_CHECK_HEADER(ltdl.h,[
		AC_CHECK_LIB(ltdl,lt_dlinit,[
			AC_DEFINE(HAVE_LTDL_H,,[Which loader library should we use? libtdl or dl?])
			some_dl_found="yes"
			BROKERLIBS="$BROKERLIBS -lltdl"
			])
	        ])
	if test "x$some_dl_found" != xyes; then
	AC_CHECK_HEADER(dlfcn.h,[
		AC_CHECK_LIB(dl,dlopen,[
			AC_DEFINE(HAVE_DLFCN_H,,[Which loader library should we use? libtdl or dl?])
			some_dl_found="yes"
			BROKERLIBS="$BROKERLIBS -ldl"
			])
	        ])
	fi

	dnl - Modified from www.erlang.org
	# Check how to export functions from the broker executable, needed
	# when dynamically loaded drivers are loaded (so that they can find
	# broker functions).
	# OS'es with ELF executables using the GNU linker (Linux and recent *BSD,
	# in rare cases Solaris) typically need '-Wl,-export-dynamic' (i.e. pass
	# -export-dynamic to the linker - also known as -rdynamic and some other
	# variants); some sysVr4 system(s) instead need(s) '-Wl,-Bexport'.
	# AIX 4.x (perhaps only for x>=2) wants -Wl,-bexpall,-brtl and doesn't
	# reliably return an error for others, thus we separate it out.
	# Otherwise we assume that if the linker accepts the flag, it is needed.
	AC_MSG_CHECKING(for extra flags needed to export symbols)
	case $host_os in
		aix4*|aix5*)
			BROKER_LDFLAGS="$BROKER_LDFLAGS -Wl,-bexpall,-brtl"
		;;
		bsdi*)
    			BROKER_LDFLAGS="$BROKER_LDFLAGS -rdynamic"
	    	;;
		*)
			save_ldflags="$LDFLAGS"
			LDFLAGS=-Wl,-export-dynamic
			AC_TRY_LINK(,,[BROKER_LDFLAGS="$BROKER_LDFLAGS -Wl,-export-dynamic"], [
				LDFLAGS=-Wl,-Bexport
				AC_TRY_LINK(,,[BROKER_LDFLAGS="$BROKER_LDFLAGS -Wl,-Bexport"],
					AC_MSG_RESULT(none))])
			LDFLAGS="$save_ldflags"
		;;
	esac
	AC_SUBST(BROKER_LDFLAGS)
	AC_SUBST(BROKERLIBS)
	test "x$BROKER_LDFLAGS" != x && AC_MSG_RESULT([$BROKER_LDFLAGS])


	dnl - Modified version from www.erlang.org
	dnl - Some 12/15/05 mods made after reading http://xaxxon.slackworks.com/phuku/dl.html
	AC_MSG_CHECKING(for linker flags for loadable modules)
	case $host_os in
		solaris2*|sysv4*)
			MOD_LDFLAGS="-G"
			INIT_OPTS="-o root -g root"
		;;
		aix4*|aix5*)
			#MOD_LDFLAGS="-G -bnoentry -bexpall"
			MOD_LDFLAGS="-G -bM:SRE -bnoentry -bexpall"
			INIT_OPTS="-o root -g root"
		;;
		freebsd2*)
			# Non-ELF GNU linker
			MOD_LDFLAGS="-Bshareable"
			INIT_OPTS="-o root -g wheel"
		;;
		darwin*)
			# Mach-O linker, a shared lib and a loadable
			# object file is not the same thing.
			MOD_LDFLAGS="-bundle -flat_namespace -undefined suppress"
			MOD_CFLAGS="$MOD_CFLAGS -fno-common"
			INIT_OPTS="-o root -g root"
		;;
		linux* | k*bsd*-gnu*)
			# assume GNU linker and ELF
			MOD_LDFLAGS="-shared"
			MOD_CFLAGS="-fPIC"
			INIT_OPTS="-o root -g root"
		;;
		freebsd*)
			MOD_LDFLAGS="-shared"
			MOD_CFLAGS="-fPIC"
			INIT_OPTS="-o root -g wheel"
		;;
		*)
			# assume GNU linker and ELF
			MOD_LDFLAGS="-shared"
			INIT_OPTS="-o root -g root"
		;;
	esac
	AC_MSG_RESULT([$MOD_LDFLAGS])
	AC_SUBST(MOD_CFLAGS)
	AC_SUBST(MOD_LDFLAGS)


	AC_DEFINE_UNQUOTED(USE_EVENT_BROKER,,[defined to bring in the event broker objects])
	BROKER_O="broker.o nebmods.o"
	AC_SUBST(BROKER_O)
	BROKER_H="../include/broker.h ../include/nebmods.h ../include/nebmodules.h ../include/nebcallbacks.h ../include/neberrors.h"
	AC_SUBST(BROKER_H)
fi

dnl Configure state based escalation ranges
USE_STATE_BASED_ESCAL_RANGES=no
AC_ARG_ENABLE(state-based-escal-ranges,AC_HELP_STRING([--enable-state-based-escal-ranges],[enables state based escalation ranges - attention: interferes with mk_livestatus neb module]),USE_STATE_BASED_ESCAL_RANGES=$enableval,USE_STATE_BASED_ESCAL_RANGES=no)
if test x$USE_STATE_BASED_ESCAL_RANGES = xyes; then
	AC_DEFINE_UNQUOTED(USE_ST_BASED_ESCAL_RANGES)
fi

dnl Configure IDOUtils

dnl set dummy for ocilib
OCILIB_LIB=""

USE_IDOUTILS=no
AC_ARG_ENABLE(idoutils,AC_HELP_STRING([--enable-idoutils],[enables database connectivity using idoutils]),USE_IDOUTILS=$enableval,USE_IDOUTILS=no)
if test x$USE_IDOUTILS = xyes; then
	if test x$USE_EVENTBROKER = xno; then
		AC_MSG_ERROR([--enable-idoutils needs also --enable-event-broker])
	fi

	dnl check if oracle enabled, then require ocilib
	dnl check if pgsql enabled, then require libpq
	dnl else require libpq

	dnl ocilib is to be expected in /usr/local/lib and /usr/local/include
	dnl libpq is to be expected in /usr/lib and /usr/include check with $ pg_config --libdir|--includedir
	dnl libdbi is to be expected in /usr/lib and /usr/include

	dnl Check for optional ocilib 
	USE_OCILIB=no
	USE_LIBPQ=no

	AC_ARG_ENABLE(oracle,AC_HELP_STRING([--enable-oracle],[enables idoutils with ocilib and oracle]),USE_OCILIB=$enableval,USE_OCILIB=no)
	AC_ARG_ENABLE(pgsql,AC_HELP_STRING([--enable-pgsql],[!not yet implemented! enables idoutils with libpq and pgsql]),USE_LIBPQ=$enableval,USE_LIBPQ=no)

	if test x$USE_OCILIB = xyes; then

		OCILIB_INC="/usr/local/include"
		OCILIB_LIB="/usr/local/lib"

	        dnl Optional ocilib library and include paths
	        AC_ARG_WITH(ocilib-lib,AC_HELP_STRING([--with-ocilib-lib=DIR],[sets location of the ocilib library]),[
	                OCILIB_LIB="${withval}"
	                ])
	        AC_ARG_WITH(ocilib-inc,AC_HELP_STRING([--with-ocilib-inc=DIR],[sets location of the ocilib include files,]),[
	                OCILIB_INC="${withval}"
        	        ])

		ORACLE_LIB=""
                AC_ARG_WITH(oracle-lib,AC_HELP_STRING([--with-oracle-lib=DIR],[sets location of the oracle library]),[
                        ORACLE_LIB="${withval}"
                        ])

		if test "$ORACLE_LIB" = ""; then
			IDO2DB_RUNTIME="$OCILIB_LIB"
		else
			IDO2DB_RUNTIME="$OCILIB_LIB:$ORACLE_LIB"
		fi


		CFLAGS="$CFLAGS -I$OCILIB_INC -DOCI_IMPORT_RUNTIME -DOCI_CHARSET_ANSI"
		LDFLAGS="$LDFLAGS -L$OCILIB_LIB"

		dnl check and include ocilib.h
		AC_CHECK_HEADER(ocilib.h, [], [], ["${OCILIB_INC}"])

		dnl check and include ocilib library, at runtime

		AC_DEFINE(HAVE_OCILIB_H,"1")
                dnl check libs
                AC_MSG_CHECKING(for ocilib)
                AC_CHECK_LIB([ocilib], [main],DBLIBS_OCI="${DBCFLAGS} -locilib" , [AC_MSG_ERROR([ERROR - We really need a ocilib to link against])] )
		DBLIBS="${DBLIBS} ${DBLIBS_OCI}"
		AC_SUBST(DBLIBS)

		dnl #define USE_ORACLE
		AC_DEFINE_UNQUOTED(USE_ORACLE)

	fi

	dnl Check for optional libpq
	if test x$USE_LIBPQ = xyes; then

		LIBPQ_INC=""
		LIBPQ_LIB=""

                dnl Optional libpq library and include paths
                AC_ARG_WITH(pgsql-lib,AC_HELP_STRING([--with-pgsql-lib=DIR],[!not yet implemented! sets location of the pgsql library]),[
                        LIBPQ_LIB="-L${withval}"
                        ])
                AC_ARG_WITH(psql-inc,AC_HELP_STRING([--with-pgsql-inc=DIR],[!not yet implemented! sets location of the pgsql include files,]),[
                        LIBPQ_INC="-I${withval}"
                        ])

                CFLAGS="$CFLAGS $LIBPQ_INC"
                LDFLAGS="$LDFLAGS $LIBPQ_LIB"

                AC_CHECK_HEADERS(libpq-fe.h)
                AC_DEFINE(HAVE_LIBPQ_FE_H,"1")
                AC_MSG_CHECKING(for lpq)
                AC_CHECK_LIB([pq], [main],DBLIBS_PQ="${DBCFLAGS} -lpq" , [AC_MSG_ERROR([ERROR - We really need a libpq to link against])] )
                DBLIBS="${DBLIBS} ${DBLIBS_PQ}"
                AC_SUBST(DBLIBS)

		dnl #define USE_PGSQL
		AC_DEFINE_UNQUOTED(USE_PGSQL)
	fi

	if test x$USE_LIBPQ = xno && test x$USE_OCILIB = xno; then

	        dnl Checks for libdbi
		dnl LIBDBI_INC="-I/usr/include"
		LIBDBI_INC=""
		dnl LIBDBI_LIB="-L/usr/lib"
		LIBDBI_LIB=""

	        dnl Optional libdbi library and include paths
	        AC_ARG_WITH(dbi-lib,AC_HELP_STRING([--with-dbi-lib=DIR],[sets location of the libdbi library]),[
			LIBDBI_LIB="-L${withval}"
	                ])
	        AC_ARG_WITH(dbi-inc,AC_HELP_STRING([--with-dbi-inc=DIR],[sets location of the libdbi include files,]),[
	                LIBDBI_INC="-I${withval}"
			])

                CFLAGS="$CFLAGS $LIBDBI_INC"
                LDFLAGS="$LDFLAGS $LIBDBI_LIB"

	        AC_CHECK_HEADERS(dbi/dbi.h)
	        AC_DEFINE(HAVE_DBI_DBI_H,"1")
	        AC_MSG_CHECKING(for libdbi)
	        AC_CHECK_LIB([dbi], [main],DBLIBS_DBI="${DBCFLAGS} -ldbi" , [AC_MSG_ERROR([ERROR - We really need a libdbi to link against])] )
		DBLIBS="${DBLIBS} ${DBLIBS_DBI}"
	        AC_SUBST(DBLIBS)

		dnl #define USE_LIBDBI
		AC_DEFINE_UNQUOTED(USE_LIBDBI)

	fi
fi

USEPERL=no;
INSTALLPERLSTUFF=no;
AC_ARG_ENABLE(embedded-perl,AC_HELP_STRING([--enable-embedded-perl],[will enable embedded Perl interpreter]),[
	USEPERL=$enableval
	]
	,USEPERL=no)

PERLCACHE=yes;
AC_ARG_WITH(perlcache,AC_HELP_STRING([--with-perlcache],[turns on cacheing of internally compiled Perl scripts]),[
	PERLCACHE=$withval
	]
	,[
	AC_DEFINE(DO_CLEAN,"1",[whether to clean cached compiled perl])
	PERLCACHE=yes;
	])

dnl Is embedded Perl being compiled in?
if test x$USEPERL = xyes; then

	AC_DEFINE_UNQUOTED(EMBEDDEDPERL,,[Is embedded Perl being compiled in?])
	PERLLIBS="`perl -MExtUtils::Embed -e ldopts`"
	PERLDIR="`perl -MConfig -e 'print $Config{installsitearch}'`"
	CFLAGS="${CFLAGS} `perl -MExtUtils::Embed -e ccopts`"
	USEPERL=yes
	INSTALLPERLSTUFF=yes;
	PERLXSI_O=perlxsi.o
	OBJS="${OBJS} ${PERLXSI_O}"
	echo "creating base/perlxsi.c"
	perl -MExtUtils::Embed -e xsinit -- -o base/perlxsi.c

	echo "Embedded Perl interpreter will be compiled in..."

	dnl Is caching enabled?
	if test x$PERLCACHE = xyes; then
		AC_DEFINE(DO_CLEAN,"0",[whether to clean cached compiled perl])
		PERLCACHE=yes;
		echo "Internally compiled Perl scripts will be cached..."
	else
		AC_DEFINE(DO_CLEAN,"1",[whether to clean cached compiled perl])
		echo "Internally compiled Perl scripts will NOT be cached..."
	fi
fi

dnl Test if we're using threaded Perl (patch by Chip Ach)
if test x$USEPERL = xyes; then
	if (perl -e 'use Config;exit -1 unless ($Config{'usethreads'});'); then
		echo "Using threaded perl"
		AC_DEFINE_UNQUOTED(THREADEDPERL,,[defined if we're using threaded Perl])
	fi
fi


dnl Option for compiling under CYGWIN
icinga_name=icinga
icingastats_name=icingastats
ido2db_name=ido2db
cygwin=no
AC_ARG_ENABLE(cygwin,AC_HELP_STRING([--enable-cygwin],[enables building under the CYGWIN environment]),[
	cygwin=$enableval
	])
if test x$cygwin = xyes; then
	CFLAGS="${CFLAGS} -DCYGWIN"
	icinga_name=icinga.exe;
	icingastats_name=icingastats.exe;
fi
AC_SUBST(icinga_name)
AC_SUBST(icingastats_name)
AC_SUBST(ido2db_name)

dnl create ido2db_runtime for rc.ido2db.in
ido2db_runtime="$IDO2DB_RUNTIME"
AC_SUBST(ido2db_runtime)

dnl Should predictive failure routines be compiled in?
dnl AC_ARG_ENABLE(failure-prediction,AC_HELP_STRING([--enable-failure-prediction],[will enable integration with failure prediction module (NOT HERE YET!)]),[
dnl	AC_DEFINE_UNQUOTED(PREDICT_FAILURES)
dnl	BASEEXTRALIBS="$BASEEXTRALIBS \$(FDATALIBS)"
dnl	echo "Failure prediction routines (incomplete!) will be compiled in..."
dnl	])

dnl Find traceroute
AC_PATH_PROG(PATH_TO_TRACEROUTE,traceroute)
AC_DEFINE_UNQUOTED(TRACEROUTE_COMMAND,"$PATH_TO_TRACEROUTE",[traceroute command to use])



dnl Package directory for Solaris pkgmk (and other OSs, eventually)
dnl VERSION=`grep 1.0 include/common.h | cut -d ' ' -f 3 | sed 's/"//g'`
VERSION=$PKG_VERSION
PACKDIR=`pwd`/pkg
AC_SUBST(PACKDIR)
AC_SUBST(VERSION)

AC_MSG_CHECKING(for type va_list)
AC_TRY_COMPILE([#ifdef __STDC__
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#else
#include <sys/types.h>
#include <stdio.h>
#include <varargs.h>
#endif],
[va_list args;],
[AC_MSG_RESULT(yes)],
[AC_DEFINE(NEED_VA_LIST,,[defined if va_list fails to compile]) AC_MSG_RESULT(no)])

dnl Check if we should build local libtap
dnl From Nagios Plugins
dnl Have disabled autodetection of system library until later
AC_ARG_ENABLE(libtap,
  AC_HELP_STRING([--enable-libtap],
                [Enable built-in libtap for unit-testing (default: no).]),
        [enable_libtap=$enableval],
        [enable_libtap=no])
#Disabled for moment
#AM_CONDITIONAL([USE_LIBTAP_LOCAL],[test "$enable_libtap" = "yes"])

# Disabled for moment
# If not local, check if we can use the system one
#if test "$enable_libtap" != "yes" ; then
#        dnl Check for libtap, to run perl-like tests
#        AC_CHECK_LIB(tap, plan_tests,
#                enable_libtap="yes"
#                )
#fi

# Finally, define tests if we use libtap
#if test "$enable_libtap" = "yes" ; then
#	AC_CONFIG_SUBDIRS([tap])
#	USE_LIBTAP=yes
#else
#	USE_LIBTAP=no
#fi


#AC_CONFIG_SUBDIRS([t/unit])

AC_SUBST(USE_LIBTAP)
AC_SUBST(CGIEXTRAS)
AC_SUBST(GDLIBS)
AC_SUBST(PERLLIBS)
AC_SUBST(PERLDIR)
AC_SUBST(PERLXSI_O)
AC_SUBST(BASEEXTRALIBS)
AC_SUBST(INITDIR)
AC_SUBST(INIT_OPTS)
AC_SUBST(INSTALLPERLSTUFF)
AC_SUBST(USE_EVENTBROKER)
AC_SUBST(USE_IDOUTILS)

AC_PATH_PROG(PERL,perl)

dnl create perl bin path for idoutils *db scripts
ido2db_perl="$PERL"
AC_SUBST(ido2db_perl)

dnl Does user want to check for SSL?
AC_ARG_ENABLE(ssl,AC_HELP_STRING([--enable-ssl],[enables native SSL support]),[
	if test x$enableval = xyes; then
		check_for_ssl=yes
	else
		check_for_ssl=no
	fi
	],check_for_ssl=no)



AC_DEFINE([HAVE_KRB5_H], [], [autoheader found this])

AC_CHECK_LIB([m], [main])

dnl Optional SSL library and include paths
ssl_dir=
ssl_inc_dir=
ssl_lib_dir=
AC_ARG_WITH(ssl,AC_HELP_STRING([--with-ssl=DIR],[sets location of the SSL installation]),[
	ssl_dir=$withval
	])
AC_ARG_WITH(ssl-inc,AC_HELP_STRING([--with-ssl-inc=DIR],[sets location of the SSL include files]),[
	ssl_inc_dir=$withval
	])
AC_ARG_WITH(ssl-lib,AC_HELP_STRING([--with-ssl-lib=DIR],[sets location of the SSL libraries]),[
	ssl_lib_dir=$withval
	])
AC_ARG_WITH(kerberos-inc,AC_HELP_STRING([--with-kerberos-inc=DIR],[sets location of the Kerberos include files]),[
	kerberos_inc_dir=$withval
	])

dnl Check for SSL support
dnl Modified version of Mark Ethan Trostler's macro <trostler@juniper.net>
if test x$check_for_ssl = xyes; then
	AC_MSG_CHECKING(for SSL headers)
	found_ssl=no
	for dir in $ssl_inc_dir $ssl_dir /usr/local/openssl /usr/local/ssl /usr/lib/ssl /usr/ssl /usr/pkg /usr/local /usr /usr/freeware/lib/openssl; do
		ssldir="$dir"
		if test -f "$dir/include/openssl/ssl.h"; then
			found_ssl=yes
			CFLAGS="$CFLAGS -I$dir/include/openssl -I$ssldir/include"
			sslincdir="$dir/include/openssl"
		        break
		fi
		if test -f "$dir/include/ssl.h"; then
			found_ssl=yes
			CFLAGS="$CFLAGS -I$dir/include"
			sslincdir="$dir/include"
		        break
		fi
		if test -f "$dir/ssl.h"; then
			found_ssl=yes
			CFLAGS="$CFLAGS -I$dir"
			sslincdir="$dir"
			ssldir="$dir/.."
		        break
		fi
		if test -f "$dir/openssl/ssl.h"; then
			found_ssl=yes
			CFLAGS="$CFLAGS -I$dir/openssl"
			sslincdir="$dir/openssl"
			ssldir="$dir/.."
		        break
		fi
	done

	if test x_$found_ssl != x_yes; then
        	AC_MSG_ERROR(Cannot find ssl headers)
	else

	        printf "SSL headers found in $ssldir\n";

		dnl Now try and find SSL libraries
		AC_MSG_CHECKING(for SSL libraries)
		found_ssl=no
		for dir in $ssl_lib_dir $ssl_dir /usr/lib64 /usr/lib /usr/local/lib /usr/lib/ssl /usr/ssl/lib /usr/openssl/lib /usr/pkg/lib  /usr/freeware/lib/openssl; do
			ssllibdir="$dir"
			if test -f "$dir/libssl.so"; then
				found_ssl=yes
			        break
			fi
			if test -f "$dir/lib/libssl.so"; then
				found_ssl=yes
				ssllibdir="$dir/lib"
			        break
			fi
		done

		if test x_$found_ssl != x_yes; then
        		AC_MSG_ERROR(Cannot find ssl libraries)
		else
		        printf "SSL libraries found in $ssllibdir\n";

			LDFLAGS="$LDFLAGS -L$ssllibdir";
		        LIBS="$LIBS -lssl -lcrypto";

			AC_DEFINE_UNQUOTED(HAVE_SSL)
			AC_SUBST(HAVE_SSL)

			dnl if ssl dir provided, thake this instead
			if test "ssl_dir" != ""; then
				ssldir="$ssl_dir"
			fi

			dnl Generate DH parameters
			echo ""
			echo "*** Generating DH Parameters for SSL/TLS ***"
			if test -f "$ssldir/sbin/openssl"; then
				sslbin=$ssldir/sbin/openssl
			else
				if test -f "$ssldir/bin/openssl"; then
                                        sslbin=$ssldir/bin/openssl
                                else
                                        sslbin=openssl
                                fi
			fi
			# awk to strip off meta data at bottom of dhparam output
			$sslbin dhparam -C 512 | awk '/^-----/ {exit} {print}' > include/dh.h
		fi
	fi

	dnl RedHat 8.0 and 9.0 include openssl compiled with kerberos, so we must include header file
	AC_MSG_CHECKING(for Kerberos include files)
	found_kerberos=no
	for dir in $kerberos_inc_dir /usr/kerberos/include; do
		kerbdir="$dir"
		if test -f "$dir/krb5.h"; then
			found_kerberos=yes
			CFLAGS="$CFLAGS -I$kerbdir"
			AC_DEFINE_UNQUOTED(HAVE_KRB5_H)
			dnl AC_CHECK_HEADERS(krb5.h)
			break
		fi
	done

	if test x_$found_kerberos != x_yes; then
		printf "could not find include files\n";
	else
		printf "found Kerberos include files in $kerbdir\n";
	fi
fi

if test -e "module/icinga-api/IcingaApi.php"; then
	echo "Configuring Icinga-API ..."
	USE_ICINGAAPI="yes"
	AC_SUBST(USE_ICINGAAPI)
	AC_CONFIG_SUBDIRS([module/icinga-api])
	echo "... done"
else
	USE_ICINGAAPI="no"
	echo "You didn't checked out the git submodule for IcingaApi."
	echo "I'll not be able to install it."
	echo ""
fi

dnl set -Wall based on os/compiler
AC_MSG_CHECKING(for -Wall based on os/compiler)
        case $host_os in
                solaris2*|sysv4*)
                ;;
                aix4*|aix5*)
			CFLAGS="-Wall $CFLAGS"
                ;;
                freebsd2*)
                ;;
                darwin*)
                ;;
                linux* | k*bsd*-gnu*)
			CFLAGS="-Wall $CFLAGS"
		;;
                freebsd*)
			CFLAGS="-Wall $CFLAGS"
                ;;
                *)
                ;;
        esac


#html/Makefile module/Makefile module/idoutils/Makefile 
#contrib/Makefile   module/idoutils/src/Makefile t-tap/Makefile
#module/idoutils/db/scripts/installdb module/idoutils/db/scripts/upgradedb module/idoutils/db/scripts/prepsql
AC_OUTPUT(Makefile subst pkginfo base/Makefile common/Makefile  cgi/Makefile xdata/Makefile daemon-init daemon-init-redhat rc.ido2db  t/Makefile  t/unit/Makefile )


perl subst $srcdir/include/locations.h
#perl subst $srcdir/html/index.html
#perl subst $srcdir/html/menu.html
#perl subst $srcdir/html/top.html

echo ""
echo "Creating sample config files in sample-config/ ..."

perl subst $srcdir/sample-config/icinga.cfg
perl subst $srcdir/sample-config/cgi.cfg
perl subst $srcdir/sample-config/cgiauth.cfg
perl subst $srcdir/sample-config/resource.cfg
perl subst $srcdir/sample-config/httpd.conf
perl subst $srcdir/sample-config/mrtg.cfg

perl subst $srcdir/sample-config/template-object/templates.cfg
perl subst $srcdir/sample-config/template-object/commands.cfg
perl subst $srcdir/sample-config/template-object/timeperiods.cfg
perl subst $srcdir/sample-config/template-object/contacts.cfg

perl subst $srcdir/sample-config/template-object/localhost.cfg
perl subst $srcdir/sample-config/template-object/windows.cfg
perl subst $srcdir/sample-config/template-object/printer.cfg
perl subst $srcdir/sample-config/template-object/switch.cfg

echo ""
echo "Creating sample config files in module/idoutils/config/ ..."

perl subst $srcdir/module/idoutils/config/icinga.cfg
perl subst $srcdir/module/idoutils/config/ido2db.cfg-sample
perl subst $srcdir/module/idoutils/config/idomod.cfg-sample

dnl Create IDOUtils Perl Scripts for DB Handling
dnl perl subst module/idoutils/db/installdb
dnl perl subst module/idoutils/db/prepsql
dnl perl subst module/idoutils/db/upgradedb


dnl Review options
echo ""
echo ""
AC_MSG_RESULT([*** Configuration summary for $PKG_NAME $PKG_VERSION $PKG_REL_DATE ***:])

echo ""
echo " General Options:"
echo " -------------------------"

AC_MSG_RESULT([        Icinga executable:  $icinga_name])
AC_MSG_RESULT([        Icinga user/group:  $icinga_user,$icinga_grp])
AC_MSG_RESULT([       Command user/group:  $command_user,$command_grp])
if test x$USEPERL = xyes; then
if test x$PERLCACHE = xyes; then
AC_MSG_RESULT([            Embedded Perl:  yes, with caching])
else
AC_MSG_RESULT([            Embedded Perl:  yes, without caching])
fi
else
AC_MSG_RESULT([            Embedded Perl:  no])
fi
if test x$USE_EVENTBROKER = xyes; then
AC_MSG_RESULT([             Event Broker:  yes])
else
AC_MSG_RESULT([             Event Broker:  no])
fi
if test x$USE_IDOUTILS = xyes; then
AC_MSG_RESULT([           Build IDOUtils:  yes])
else
AC_MSG_RESULT([           Build IDOUtils:  no])
fi
AC_MSG_RESULT([        Install \${prefix}:  $prefix])
AC_MSG_RESULT([                Lock file:  $lockfile])
AC_MSG_RESULT([   Check result directory:  $CHECKRESULTDIR])
AC_MSG_RESULT([           Init directory:  $init_dir])
AC_MSG_RESULT([  Apache conf.d directory:  $HTTPD_CONF])
AC_MSG_RESULT([             Mail program:  $MAIL_PROG])
AC_MSG_RESULT([                  Host OS:  $host_os])

echo ""
echo " Web Interface Options:"
echo " ------------------------"

AC_MSG_RESULT([                 HTML URL:  http://localhost$htmurl/])
AC_MSG_RESULT([                  CGI URL:  http://localhost$cgiurl/])
AC_MSG_RESULT([ Traceroute (used by WAP):  $PATH_TO_TRACEROUTE])

dnl echo ""
dnl echo " External Data Routines:"
dnl echo " ------------------------"

dnl AC_MSG_RESULT([              Status data:  $XSDCOMMENT])
dnl AC_MSG_RESULT([             Comment data:  $XCDCOMMENT])
dnl AC_MSG_RESULT([            Downtime data:  $XDDCOMMENT])
dnl AC_MSG_RESULT([          Peformance data:  $XPDCOMMENT])


echo ""
echo ""
echo "Review the options above for accuracy.  If they look okay,"
echo "type 'make all' to compile the main program and CGIs."
echo ""
echo ""
echo "!!! Please take care about the upgrade documentation !!!"
echo ""
